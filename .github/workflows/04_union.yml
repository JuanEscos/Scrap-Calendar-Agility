name: 04 - Union participantes

on:
  workflow_run:
    workflows: ["03 - Participantes (scrape + process)"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read

concurrency:
  group: participantes-union
  cancel-in-progress: true

jobs:
  union_participants:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # ---------- PARTICIPANTES (03) ----------
      - name: Descargar artefacto 03 (workflow_run)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: a03-participants-processed
          run-id: ${{ github.event.workflow_run.id }}
          path: ./artifacts03
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Herramientas para descarga manual
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      - name: Descargar ÚLTIMO artefacto 03 (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          repo="${{ github.repository }}"
          best_id=""
          best_ts=""
          page=1
          while :; do
            resp=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                   "https://api.github.com/repos/${repo}/actions/artifacts?per_page=100&page=${page}")
            n=$(echo "$resp" | jq '.artifacts | length')
            [ "$n" -eq 0 ] && break
            while read -r id ts; do
              if [ -z "$best_ts" ] || [ "$(date -d "$ts" +%s)" -gt "$(date -d "$best_ts" +%s)" ]; then
                best_id="$id"; best_ts="$ts"
              fi
            done < <(echo "$resp" | jq -r '.artifacts[] | select(.name=="a03-participants-processed" and .expired==false) | "\(.id) \(.updated_at)"')
            page=$((page+1))
          done
          [ -n "$best_id" ] || { echo "::error::No hay artefacto activo llamado a03-participants-processed"; exit 1; }
          echo "Descargando artifact id=$best_id (updated_at=$best_ts)"
          mkdir -p artifacts03
          curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" -L \
               "https://api.github.com/repos/${repo}/actions/artifacts/${best_id}/zip" \
               -o artifacts03.zip
          unzip -o artifacts03.zip -d ./artifacts03
          ls -la ./artifacts03 || true

      # ---------- EVENTOS (01) ----------
      - name: Instalar lftp
        run: sudo apt-get update && sudo apt-get install -y lftp

      - name: Descargar 01events_last.json desde FTP
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          mkdir -p artifacts01
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e " \
            set cmd:fail-exit true; \
            set net:timeout 25; \
            set net:max-retries 1; \
            set net:persist-retries 0; \
            set ftp:ssl-force true; \
            set ftp:ssl-protect-data true; \
            set ftp:passive-mode true; \
            set ftp:prefer-epsv false; \
            set ssl:verify-certificate no; \
            cd '${FTP_REMOTE_DIR}' || cd '/${FTP_REMOTE_DIR}'; \
            cd 'Competiciones'; \
            cd 'ListadoEventos'; \
            cd 'Workflows'; \
            cd '01'; \
            get -O '${PWD}/artifacts01' '01events_last.json'; \
            bye"
          ls -la ./artifacts01 || true

      - name: Comprobación entradas descargadas
        run: |
          echo "Contenido artifacts03:"
          find ./artifacts03 -maxdepth 2 -type f -printf "%P\n" || true
          echo "Contenido artifacts01:"
          find ./artifacts01 -maxdepth 2 -type f -printf "%P\n" || true

      # ---------- UNIÓN ----------
      # ¡¡OJO!! El script acepta SOLO 2 argumentos: IN_PATH y FINAL_OUT
      - name: Ejecutar unión 04_eventosproxUnion.py
        run: |
          set -euo pipefail
          mkdir -p output
          python "./04_eventosproxUnion.py" "./artifacts03" "./output/participants_completos_final.json"

      - name: Verificar resultado y hash local
        run: |
          set -euo pipefail
          ls -lh ./output
          test -f ./output/participants_completos_final.json
          sha256sum ./output/participants_completos_final.json | awk '{print $1}' > local.sha256
          echo "Hash local: $(cat local.sha256)"

      - name: Subir artefacto final
        uses: actions/upload-artifact@v4
        with:
          name: a04-participantes-final
          path: ./output/participants_completos_final.json
          if-no-files-found: error
          retention-days: 14

      # ---------- PUBLICACIÓN FTP ----------
      - name: Publicar por FTP (Workflows/04 y ListadoParticipantes)
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          FILE="./output/participants_completos_final.json"
          [ -f "$FILE" ] || { echo "::error::No existe $FILE"; exit 1; }
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"
          WF_DIR="${FTP_REMOTE_DIR}/Competiciones/ListadoEventos/Workflows/04"
          PUB_DIR="${FTP_REMOTE_DIR}/Competiciones/ListadoParticipantes"

          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e " \
            set cmd:fail-exit true; \
            set net:timeout 25; \
            set net:max-retries 1; \
            set net:persist-retries 0; \
            set ftp:ssl-force true; \
            set ftp:ssl-protect-data true; \
            set ftp:passive-mode true; \
            set ftp:prefer-epsv false; \
            set ssl:verify-certificate no; \
            cd '${FTP_REMOTE_DIR}' || cd '/${FTP_REMOTE_DIR}'; \
            mkdir -f Competiciones; cd Competiciones; \
            mkdir -f ListadoEventos; cd ListadoEventos; \
            mkdir -f Workflows; cd Workflows; \
            mkdir -f 04; cd 04; \
            put -O . '${FILE}' -o 'participants_completos_final_${TS}.json'; \
            put -O . '${FILE}' -o 'participants_completos_final_last.json'; \
            cd '${FTP_REMOTE_DIR}' || cd '/${FTP_REMOTE_DIR}'; \
            mkdir -f Competiciones; cd Competiciones; \
            mkdir -f ListadoParticipantes; cd ListadoParticipantes; \
            put -O . '${FILE}' -o 'participants_completos_final_${TS}.json'; \
            put -O . '${FILE}' -o 'participants_completos_final.json'; \
            bye"

      - name: Verificar remoto (descarga y compara hash de ListadoParticipantes)
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          rm -f remote_final.json || true
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e " \
            set cmd:fail-exit true; \
            set net:timeout 25; \
            set net:max-retries 1; \
            set net:persist-retries 0; \
            set ftp:ssl-force true; \
            set ftp:ssl-protect-data true; \
            set ftp:passive-mode true; \
            set ftp:prefer-epsv false; \
            set ssl:verify-certificate no; \
            cd '${FTP_REMOTE_DIR}' || cd '/${FTP_REMOTE_DIR}'; \
            cd Competiciones; cd ListadoParticipantes; \
            get -O '${PWD}' 'participants_completos_final.json' -o 'remote_final.json'; \
            bye"
          sha256sum remote_final.json | awk '{print $1}' > remote.sha256
          echo "Hash remoto: $(cat remote.sha256)"
          diff -q local.sha256 remote.sha256 && echo "OK: hash coincide"
