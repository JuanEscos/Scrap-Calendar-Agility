name: 04 - Union participantes

on:
  workflow_run:
    workflows: ["03 Participantes (scrape + process)"]  # Debe coincidir EXACTAMENTE con el 'name' del 03
    types: [completed]
  workflow_dispatch: {}

concurrency:
  group: participantes-union
  cancel-in-progress: true

jobs:
  union:
    # Encadenado si viene del 03 con éxito, o manual si lo lanzas a mano
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid
      ARTIFACT_NAME: a03-participants-processed
      OUT_DIR: ./output

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip

      - name: Instalar utilidades (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      # ------- Descarga artefacto del 03 (modo encadenado) -------
      - name: Descargar artefacto desde el run que me dispara (workflow_run)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./from03
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          merge-multiple: true

      # ------- Fallback para ejecución manual: buscar el último artefacto activo por API -------
      - name: Descargar último artefacto disponible (workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          repo="${{ github.repository }}"
          artifact_name="${{ env.ARTIFACT_NAME }}"
          echo "Buscando artifact activo con nombre: $artifact_name"
          best_id=""
          best_ts=""
          page=1
          while :; do
            resp=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                   "https://api.github.com/repos/${repo}/actions/artifacts?per_page=100&page=${page}")
            n=$(echo "$resp" | jq '.artifacts | length')
            [ "$n" -eq 0 ] && break
            while read -r id ts; do
              if [ -z "$best_ts" ] || [ "$(date -d "$ts" +%s)" -gt "$(date -d "$best_ts" +%s)" ]; then
                best_id="$id"; best_ts="$ts"
              fi
            done < <(echo "$resp" | jq -r --arg N "$artifact_name" '.artifacts[] | select(.name==$N and .expired==false) | "\(.id) \(.updated_at)"')
            page=$((page+1))
          done
          [ -n "$best_id" ] || { echo "::error::No se encontró artifact activo llamado $artifact_name"; exit 1; }
          echo "Descargando artifact id=$best_id (updated_at=$best_ts)"
          mkdir -p from03
          curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" -L \
               "https://api.github.com/repos/${repo}/actions/artifacts/${best_id}/zip" \
               -o from03.zip
          unzip -o from03.zip -d ./from03

      - name: Debug listado de from03
        run: |
          echo "Contenido de ./from03:"
          ls -la ./from03 || true
          echo "Ficheros:"
          find ./from03 -maxdepth 1 -type f -printf "%f\n" || true

      - name: Comprobar que hay ficheros descargados
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=( ./from03/* )
          if [ ${#files[@]} -eq 0 ]; then
            echo "::error::No se descargó ningún artefacto del 03 con nombre '${ARTIFACT_NAME}'."
            echo "Revisa que el 03 termine con éxito y suba el artifact llamado exactamente '${ARTIFACT_NAME}'."
            exit 1
          fi
          echo "OK, ${#files[@]} fichero(s) del artefacto."

      - name: Ejecutar unión
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR"
          python "./04_eventosproxUnion.py" "./from03" "$OUT_DIR/participants_completos_final.json"

      - name: Verificar y listar salida
        run: |
          set -euo pipefail
          ls -lh "$OUT_DIR"
          test -f "$OUT_DIR/participants_completos_final.json"
          head -n 30 "$OUT_DIR/participants_completos_final.json" || true

      - name: Subir artefacto final
        uses: actions/upload-artifact@v4
        with:
          name: a04-participants-final
          path: ${{ env.OUT_DIR }}/participants_completos_final.json
          if-no-files-found: error
          retention-days: 7
