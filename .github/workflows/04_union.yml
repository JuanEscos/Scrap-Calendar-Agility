name: 04 - Union participantes

on:
  workflow_run:
    workflows: ["03 - Participantes (scrape + process)"]  # Debe coincidir EXACTO con el name del 03
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read

concurrency:
  group: participantes-union
  cancel-in-progress: true

jobs:
  union_participants:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # --------- DESCARGA DE ARTEFACTOS DEL 03 ---------
      # Ruta normal (encadenado): descargar del run que nos dispara
      - name: Descargar artefacto del 03 (modo encadenado)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: a03-participants-processed
          run-id: ${{ github.event.workflow_run.id }}
          path: ./artifacts03
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Ruta manual: buscar el ÚLTIMO artefacto activo llamado a03-participants-processed y bajarlo vía API
      - name: Instalar jq y unzip (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      - name: Descargar ÚLTIMO artefacto a03-participants-processed (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          repo="${{ github.repository }}"
          best_id=""
          best_ts=""
          page=1
          while :; do
            resp=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                   "https://api.github.com/repos/${repo}/actions/artifacts?per_page=100&page=${page}")
            n=$(echo "$resp" | jq '.artifacts | length')
            [ "$n" -eq 0 ] && break
            while read -r id ts; do
              if [ -z "$best_ts" ] || [ "$(date -d "$ts" +%s)" -gt "$(date -d "$best_ts" +%s)" ]; then
                best_id="$id"; best_ts="$ts"
              fi
            done < <(echo "$resp" | jq -r '.artifacts[] | select(.name=="a03-participants-processed" and .expired==false) | "\(.id) \(.updated_at)"')
            page=$((page+1))
          done
          [ -n "$best_id" ] || { echo "::error::No hay artefacto activo llamado a03-participants-processed"; exit 1; }
          echo "Descargando artifact id=$best_id (updated_at=$best_ts)"
          mkdir -p artifacts03
          curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" -L \
               "https://api.github.com/repos/${repo}/actions/artifacts/${best_id}/zip" \
               -o artifacts03.zip
          unzip -o artifacts03.zip -d ./artifacts03
          ls -la ./artifacts03

      - name: Listado de artefactos descargados
        run: |
          echo "Ficheros en ./artifacts03:"
          find ./artifacts03 -maxdepth 2 -type f -printf "%P\n" || true

      # --------- UNIÓN ---------
      - name: Ejecutar 04_eventosproxUnion.py
        run: |
          set -euo pipefail
          mkdir -p output
          python "./04_eventosproxUnion.py" "./artifacts03" "./output/participants_completos_final.json"

      - name: Verificar resultado final
        run: |
          set -euo pipefail
          ls -lh ./output
          test -f ./output/participants_completos_final.json
          sha256sum ./output/participants_completos_final.json | awk '{print $1}' > local.sha256
          echo "Hash local: $(cat local.sha256)"

      # --------- FTPS ---------
      - name: (FTPS) Listar carpeta remota antes de subir
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoParticipantes"
          echo "Listando (previo): ${BASE}/"
          curl --fail --ssl-reqd --user "${FTP_USERNAME}:${FTP_PASSWORD}" "${BASE}/" -l || true

      - name: (FTPS) Subir JSON final (fijo + backup con timestamp)
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          FILE="./output/participants_completos_final.json"
          [ -f "$FILE" ] || { echo "::error::No existe $FILE"; exit 1; }
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoParticipantes"
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"

          echo "Subiendo (nombre fijo): ${BASE}/participants_completos_final.json"
          curl --fail --ssl-reqd --ftp-create-dirs --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --upload-file "$FILE" \
               "${BASE}/participants_completos_final.json"

          echo "Subiendo (backup con timestamp): ${BASE}/participants_completos_final_${TS}.json"
          curl --fail --ssl-reqd --ftp-create-dirs --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --upload-file "$FILE" \
               "${BASE}/participants_completos_final_${TS}.json"

      - name: (FTPS) Verificar remoto (descargar y comparar hash)
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoParticipantes"
          echo "Descargando para verificación: ${BASE}/participants_completos_final.json"
          curl --fail --ssl-reqd --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --output remote.json "${BASE}/participants_completos_final.json"

          sha256sum remote.json | awk '{print $1}' > remote.sha256
          echo "Hash remoto: $(cat remote.sha256)"
          diff -q local.sha256 remote.sha256 && echo "OK: hash coincide"
