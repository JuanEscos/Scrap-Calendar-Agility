name: 04 Union participantes

on:
  workflow_dispatch: {}
  schedule:
    - cron: "25 5 * * *"

jobs:
  union:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    env:
      OUT_DIR: ./output

    steps:
      - uses: actions/checkout@v4

      - name: Ensure output dir
        shell: bash
        run: mkdir -p "$OUT_DIR"

      # 1) Ãšltimo run SUCCESS del 03 (por nombre de fichero de workflow)
      - name: Get latest successful run of 03
        id: getrun
        uses: actions/github-script@v7
        with:
          script: |
            const wfFile = '03_participantes.yml';
            const res = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: wfFile,
              status: 'success',
              per_page: 1
            });
            if (!res.data.workflow_runs.length) {
              core.setFailed(`No successful runs for ${wfFile}`);
              return;
            }
            core.setOutput('run_id', res.data.workflow_runs[0].id);

      # 2) Listar artefactos disponibles en ese run, elegir IDs a descargar
      - name: List artifacts in that run
        id: listart
        uses: actions/github-script@v7
        env:
          RUN_ID: ${{ steps.getrun.outputs.run_id }}
        with:
          script: |
            const run_id = process.env.RUN_ID;
            const res = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run_id
            });
            const arts = res.data.artifacts || [];
            console.log("Artifacts in run:", arts.map(a => ({id:a.id,name:a.name,size:a.size_in_bytes,state:a.archive_download_url? 'ready':'?'})));

            // Busca el artefacto objetivo
            const TARGET = 'a03-participants-processed';
            const exact = arts.filter(a => a.name === TARGET);
            let ids = [];
            if (exact.length) {
              ids = exact.map(a => String(a.id));
              core.setOutput('mode', 'target');
              console.log(`Using target artifact '${TARGET}' with IDs:`, ids);
            } else {
              // Fallback: descargar todos
              ids = arts.map(a => String(a.id));
              core.setOutput('mode', 'all');
              console.warn(`Target '${TARGET}' NOT FOUND. Fallback: downloading ALL artifacts:`, ids);
            }
            core.setOutput('artifact_ids', ids.join(','));

      # 3) Descargar por IDs (uno o varios)
      - name: Download artifacts (by IDs)
        uses: actions/download-artifact@v4
        with:
          artifact-ids: ${{ steps.listart.outputs.artifact_ids }}
          merge-multiple: true
          path: ${{ env.OUT_DIR }}

      - name: Debug listing
        shell: bash
        run: |
          echo "Contenido de $OUT_DIR:"
          ls -la "$OUT_DIR" || true
          echo "Ficheros:"
          find "$OUT_DIR" -maxdepth 1 -type f -printf "%f\n" || true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run union
        shell: bash
        run: |
          set -euo pipefail
          python ./04_eventosproxUnion.py "$OUT_DIR" "$OUT_DIR/participantes_completos_final.json"

      - name: Upload final artifact
        uses: actions/upload-artifact@v4
        with:
          name: a04-participantes-final
          path: ${{ env.OUT_DIR }}/participantes_completos_final.json
          if-no-files-found: error
