name: 4 - Union participantes

on:
  workflow_run:
    workflows: ["3 - Participantes por evento"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read

concurrency:
  group: participantes-union
  cancel-in-progress: true

jobs:
  union_participants:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid

    steps:
      - uses: actions/checkout@v4

      - name: Mostrar árbol del repo y rama (debug)
        run: |
          echo "BRANCH: $GITHUB_REF_NAME"
          git ls-files | sed 's/^/ - /' | head -n 200
          echo "----"; ls -la; echo "---- FIN LISTADO ----"

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Instalar dependencias
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # --- Descarga artefactos ---
      - name: Descargar artefacto (modo encadenado workflow_run)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: a03-participants-jsons
          path: ./participants_jsons
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Manual: localizar por API el último artifact 'a03-participants-jsons' y bajarlo por ID
      - name: Instalar jq
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Buscar último artifact 'a03-participants-jsons' (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: find_part
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          repo="${{ github.repository }}"
          best_id=""
          best_ts=""
          for page in 1 2 3 4 5; do
            resp=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                   "https://api.github.com/repos/${repo}/actions/artifacts?per_page=100&page=${page}")
            count=$(echo "$resp" | jq '.artifacts | length')
            [ "$count" -eq 0 ] && break
            while read -r id ts; do
              if [ -z "$best_ts" ] || [ "$(date -d "$ts" +%s)" -gt "$(date -d "$best_ts" +%s)" ]; then
                best_id="$id"; best_ts="$ts"
              fi
            done < <(echo "$resp" | jq -r '.artifacts[] | select(.name=="a03-participants-jsons" and .expired==false) | "\(.id) \(.updated_at)"')
          done
          if [ -z "$best_id" ]; then
            echo "::error::No se encontró artifact activo llamado a03-participants-jsons"; exit 1
          fi
          echo "artifact_id=$best_id" >> "$GITHUB_OUTPUT"
          echo "Último artifact id: $best_id @ $best_ts"

      - name: Descargar artifact por ID (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/download-artifact@v4
        with:
          artifact-ids: ${{ steps.find_part.outputs.artifact_id }}
          path: ./participants_jsons
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # --- Unión ---
      - name: Ejecutar 04_eventosproxUnion.py
        run: |
          set -euo pipefail
          mkdir -p output
          SCRIPT_PATH="$(find . -maxdepth 5 -type f -name '04_eventosproxUnion.py' -print -quit)"
          if [ -z "${SCRIPT_PATH:-}" ]; then
            echo "::error::No se encontró 04_eventosproxUnion.py"; exit 1
          fi
          echo "Usando script: $SCRIPT_PATH"
          python "$SCRIPT_PATH" "./participants_jsons" "./output/participants_completos_final.json"

      - name: Verificar resultado final
        run: |
          set -euo pipefail
          ls -lh ./output
          test -f ./output/participants_completos_final.json
          sha256sum ./output/participants_completos_final.json | awk '{print $1}' > local.sha256
          echo "Hash local: $(cat local.sha256)"

      # --- FTPS: listar, subir (fijo + timestamp), verificar ---
      - name: (FTPS) Listar carpeta remota antes de subir
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoParticipantes"
          echo "Listando: ${BASE}/"
          curl --fail --ssl-reqd --user "${FTP_USERNAME}:${FTP_PASSWORD}" "${BASE}/" -l || true

      - name: (FTPS) Subir JSON final (fijo + backup con timestamp)
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          FILE="./output/participants_completos_final.json"
          [ -f "$FILE" ] || { echo "::error::No existe $FILE"; exit 1; }

          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoParticipantes"
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"

          echo "Subiendo (nombre fijo): ${BASE}/participants_completos_final.json"
          curl --fail --ssl-reqd --ftp-create-dirs --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --upload-file "$FILE" \
               "${BASE}/participants_completos_final.json"

          echo "Subiendo (backup con timestamp): ${BASE}/participants_completos_final_${TS}.json"
          curl --fail --ssl-reqd --ftp-create-dirs --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --upload-file "$FILE" \
               "${BASE}/participants_completos_final_${TS}.json"

      - name: (FTPS) Verificar remoto (descargar y comparar hash)
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoParticipantes"
          echo "Descargando para verificación: ${BASE}/participants_completos_final.json"
          curl --fail --ssl-reqd --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --output remote.json "${BASE}/participants_completos_final.json"

          sha256sum remote.json | awk '{print $1}' > remote.sha256
          echo "Hash remoto: $(cat remote.sha256)"
          diff -q local.sha256 remote.sha256 && echo "OK: hash coincide"
