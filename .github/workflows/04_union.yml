name: 04 Union participantes

on:
  workflow_dispatch: {}
  schedule:
    - cron: "25 5 * * *"

jobs:
  union:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    env:
      OUT_DIR: ./output

    steps:
      - uses: actions/checkout@v4

      - name: Ensure output dir
        shell: bash
        run: mkdir -p "$OUT_DIR"

      # Busca el último run exitoso del workflow 03 por NOMBRE DE FICHERO
      - name: Get latest successful run of 03
        id: getrun
        uses: actions/github-script@v7
        with:
          script: |
            const wfFile = '03_participantes.yml'; // <--- nombre del fichero en .github/workflows/
            const res = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: wfFile,
              status: 'success',
              per_page: 1
            });
            if (!res.data.workflow_runs.length) {
              core.setFailed(`No successful runs for ${wfFile}`);
              return;
            }
            core.setOutput('run_id', res.data.workflow_runs[0].id);

      - name: Download artifacts from 03
        uses: actions/download-artifact@v4
        with:
          name: a03-participants-processed
          run-id: ${{ steps.getrun.outputs.run_id }}
          merge-multiple: true
          path: ${{ env.OUT_DIR }}

      - name: Debug listing
        shell: bash
        run: |
          echo "Contenido de $OUT_DIR:"
          ls -la "$OUT_DIR" || true
          echo "Ficheros:"
          find "$OUT_DIR" -maxdepth 1 -type f -printf "%f\n" || true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run union
        shell: bash
        run: |
          set -euo pipefail
          python ./04_eventosproxUnion.py "$OUT_DIR" "$OUT_DIR/participantes_completos_final.json"

      - name: Upload final artifact
        uses: actions/upload-artifact@v4
        with:
          name: a04-participantes-final
          path: ${{ env.OUT_DIR }}/participantes_completos_final.json
          if-no-files-found: error

      # --- (Opcional) Publicación por FTPS ---
      - name: FTPS list remote dir (pre)
        if: always()
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}   # p.ej. /www/NewWeb/Privado
        shell: bash
        run: |
          set -euo pipefail
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoEventos"
          echo "Listando: ${BASE}/"
          curl --fail --ssl-reqd --user "${FTP_USERNAME}:${FTP_PASSWORD}" "${BASE}/" -l || true

      - name: FTPS upload final JSON
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          FILE="${{ env.OUT_DIR }}/participantes_completos_final.json"
          if [ ! -f "$FILE" ]; then
            echo "::error::No existe $FILE"; exit 1
          fi
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoEventos"
          echo "Subiendo: $FILE -> ${BASE}/participantes_completos_final.json"
          curl --fail --ssl-reqd --ftp-create-dirs --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --upload-file "$FILE" \
               "${BASE}/participantes_completos_final.json"

      - name: FTPS verify (hash)
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoEventos"
          curl --fail --ssl-reqd --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --output remote.json "${BASE}/participantes_completos_final.json"

          sha256sum "${{ env.OUT_DIR }}/participantes_completos_final.json" | awk '{print $1}' > local.sha256
          sha256sum remote.json | awk '{print $1}' > remote.sha256
          echo "Hash local : $(cut -d' ' -f1 local.sha256)"
          echo "Hash remoto: $(cut -d' ' -f1 remote.sha256)"
          diff -q local.sha256 remote.sha256
          echo "OK: hash coincide"
