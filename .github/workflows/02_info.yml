name: 02 - INFO desde 01events

on:
  workflow_run:
    workflows: ["01 - Eventos Prox (JSON base)"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read

concurrency:
  group: info-02
  cancel-in-progress: true

jobs:
  produce_02info:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      TZ: Europe/Madrid
      HEADLESS: "true"
      # El script acepta cualquiera de estos nombres:
      FLOW_EMAIL:        ${{ secrets.FLOW_EMAIL }}
      FLOW_PASS:         ${{ secrets.FLOW_PASS }}
      FLOW_USER_EMAIL:   ${{ secrets.FLOW_EMAIL }}
      FLOW_USER_PASSWORD: ${{ secrets.FLOW_PASS }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install selenium webdriver-manager beautifulsoup4 lxml

      - name: Install Google Chrome
        uses: browser-actions/setup-chrome@v1

      # ========== INPUT desde 01 ==========
      - name: Download 01 artifact (chained)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: a01-01events-json
          path: ./artifacts01
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pick latest successful run of 01 (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: pickrun
        uses: actions/github-script@v7
        with:
          script: |
            const WORKFLOW_NAME = "01 - Eventos Prox (JSON base)";
            const { data: wfList } = await github.rest.actions.listRepoWorkflows({ owner: context.repo.owner, repo: context.repo.repo });
            const wf = wfList.workflows.find(w => w.name === WORKFLOW_NAME);
            if (!wf) { core.setFailed(`No workflow named "${WORKFLOW_NAME}"`); return; }
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner, repo: context.repo.repo, workflow_id: wf.id, status: 'success', per_page: 1
            });
            if (!runs.workflow_runs.length) { core.setFailed(`No successful runs for "${WORKFLOW_NAME}"`); return; }
            core.setOutput('run_id', runs.workflow_runs[0].id);
            core.setOutput('run_url', runs.workflow_runs[0].html_url);

      - name: Download 01 artifact (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/download-artifact@v4
        with:
          name: a01-01events-json
          path: ./artifacts01
          run-id: ${{ steps.pickrun.outputs.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare IN/OUT
        run: |
          set -euo pipefail
          mkdir -p output
          if   [ -f ./artifacts01/01events.json ]; then cp -f ./artifacts01/01events.json ./output/01events_last.json
          elif [ -f ./artifacts01/01events_last.json ]; then cp -f ./artifacts01/01events_last.json ./output/01events_last.json
          else
            echo "::error::Missing 01events(.json|_last.json) in artifacts01"; exit 1
          fi
          echo "IN : ./output/01events_last.json"
          echo "OUT: ./output/02competiciones_detalladas.json"

      - name: Run 02_eventosproxINFO.py
        run: |
          set -euo pipefail
          python "./02_eventosproxINFO.py" "./output/01events_last.json" "./output/02competiciones_detalladas.json"
          # Copia canónica para FTP
          cp -f ./output/02competiciones_detalladas.json ./output/02info_last.json
          ls -lh ./output
          test -f ./output/02info_last.json

      - name: Upload artifact for 03
        uses: actions/upload-artifact@v4
        with:
          name: a02-02info-json
          path: ./output/02competiciones_detalladas.json
          if-no-files-found: error
          retention-days: 7

      # ===== FTPS (lftp) con timeouts y verificación, igual que el 01 =====
      - name: Install lftp
        run: |
          sudo apt-get update
          sudo apt-get install -y lftp

      # Opcional: smoke test de ruta base (ayuda a diagnosticar permisos/ruta)
      - name: (FTPS) Smoke test base path
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Probando acceso a base: ${FTP_REMOTE_DIR}"
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e " \
            set cmd:fail-exit true; \
            set net:timeout 25; \
            set net:max-retries 1; \
            set net:persist-retries 0; \
            set ftp:ssl-force true; \
            set ftp:ssl-protect-data true; \
            set ftp:passive-mode true; \
            set ftp:prefer-epsv false; \
            set ssl:verify-certificate no; \
            cd '${FTP_REMOTE_DIR}' || cd '/${FTP_REMOTE_DIR}'; \
            pwd; cls -l; \
            bye"

      - name: (FTPS) Upload + verify (máx 5 min)
        timeout-minutes: 5
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          FILE="./output/02competiciones_detalladas.json"
          [ -f "$FILE" ] || { echo "::error::Falta $FILE"; exit 1; }

          DEST_DIR="$(printf "%s/Competiciones/ListadoEventos/Workflows/02" "${FTP_REMOTE_DIR%/}")"
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"
          echo "DEST_DIR calculado: $DEST_DIR"

          # Subir fijo + histórico con la misma configuración que funcionó en el 01
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e " \
            set cmd:fail-exit true; \
            set net:timeout 25; \
            set net:max-retries 1; \
            set net:persist-retries 0; \
            set ftp:ssl-force true; \
            set ftp:ssl-protect-data true; \
            set ftp:passive-mode true; \
            set ftp:prefer-epsv false; \
            set ssl:verify-certificate no; \
            cd '${FTP_REMOTE_DIR}' || cd '/${FTP_REMOTE_DIR}'; \
            mkdir -f Competiciones; cd Competiciones; \
            mkdir -f ListadoEventos; cd ListadoEventos; \
            mkdir -f Workflows; cd Workflows; \
            mkdir -f 02; cd 02; \
            put -O . '${FILE}' -o '02info_last.json'; \
            put -O . '${FILE}' -o '02info_${TS}.json'; \
            echo 'Contenido en destino:'; pwd; cls -l; \
            bye"

          # Descargar a ./dl y comparar hash (verificación real)
          rm -rf dl && mkdir -p dl
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e " \
            set cmd:fail-exit true; \
            set net:timeout 25; \
            set net:max-retries 1; \
            set net:persist-retries 0; \
            set ftp:ssl-force true; \
            set ftp:ssl-protect-data true; \
            set ftp:passive-mode true; \
            set ftp:prefer-epsv false; \
            set ssl:verify-certificate no; \
            cd '${DEST_DIR}' || cd '/${DEST_DIR}'; \
            get -O '${PWD}/dl' '02info_last.json'; \
            bye"

          test -f dl/02info_last.json || { echo "::error::No se descargó dl/02info_last.json"; ls -la dl; exit 1; }
          sha256sum "./output/02competiciones_detalladas.json" | awk '{print $1}' > local.sha256
          sha256sum dl/02info_last.json | awk '{print $1}' > remote.sha256
          echo "Local : $(cat local.sha256)"
          echo "Remoto: $(cat remote.sha256)"
          diff -q local.sha256 remote.sha256
