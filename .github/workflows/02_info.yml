name: 02 - INFO desde 01events

on:
  workflow_run:
    workflows: ["01 - Eventos Prox (JSON base)"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read

concurrency:
  group: info-02
  cancel-in-progress: true

jobs:
  produce_02info:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid
      HEADLESS: "true"
      # Tu script usa estas env:
      FLOW_USER_EMAIL: ${{ secrets.FLOW_EMAIL }}
      FLOW_USER_PASSWORD: ${{ secrets.FLOW_PASS }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Instalar dependencias
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install "selenium==4.*" "webdriver-manager==4.*" beautifulsoup4 lxml

      - name: Setup Chrome (Selenium)
        uses: browser-actions/setup-chrome@v1

      # ========= Descarga artefacto del 01 =========
      # Encadenado: del run que dispara este workflow
      - name: Descargar artefacto 01 (encadenado)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: a01-01events-json
          path: ./artifacts01
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Manual: localizar por NOMBRE del workflow 01 y traer el último run OK
      - name: Localizar último run OK del 01 (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: pickrun
        uses: actions/github-script@v7
        with:
          script: |
            // Debe coincidir con el "name:" del workflow 01
            const WORKFLOW_NAME = "01 - Eventos Prox (JSON base)";
            const { data: wfList } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const wf = wfList.workflows.find(w => w.name === WORKFLOW_NAME);
            if (!wf) {
              core.setFailed(`No se encontró el workflow llamado "${WORKFLOW_NAME}". Comprueba el name: del 01.`);
              return;
            }
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: wf.id,
              status: 'success',
              per_page: 1
            });
            if (!runs.workflow_runs.length) {
              core.setFailed(`No hay runs success recientes de "${WORKFLOW_NAME}".`);
              return;
            }
            core.setOutput('run_id', runs.workflow_runs[0].id);
            core.setOutput('run_url', runs.workflow_runs[0].html_url);

      - name: Descargar artefacto 01 (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/download-artifact@v4
        with:
          name: a01-01events-json
          path: ./artifacts01
          run-id: ${{ steps.pickrun.outputs.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Preparar entrada/salida
        run: |
          set -euo pipefail
          mkdir -p output
          if   [ -f ./artifacts01/01events_last.json ]; then cp -f ./artifacts01/01events_last.json ./output/01events_last.json
          elif [ -f ./artifacts01/01events.json     ]; then cp -f ./artifacts01/01events.json     ./output/01events_last.json
          else
            echo "::error::No se encontró 01events_last.json ni 01events.json en artifacts01"; exit 1
          fi
          echo "IN : ./output/01events_last.json"
          echo "OUT: ./output/02competiciones_detalladas.json"

      - name: Ejecutar 02_eventosproxINFO.py
        run: |
          set -euo pipefail
          python "./02_eventosproxINFO.py" "./output/01events_last.json" "./output/02competiciones_detalladas.json"
          ls -lh ./output
          test -f ./output/02competiciones_detalladas.json

      - name: Subir artefacto 02info
        uses: actions/upload-artifact@v4
        with:
          name: a02-02info-json
          path: ./output/02competiciones_detalladas.json
          if-no-files-found: error
          retention-days: 7

      # ========= Publicación por FTPS con lftp (sin here-doc) =========
      - name: Instalar lftp
        run: sudo apt-get update && sudo apt-get install -y lftp

      - name: Subir por FTPS (fijo + timestamp) y verificar
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          SRC="./output/02competiciones_detalladas.json"
          [ -f "$SRC" ] || { echo "::error::Falta $SRC"; exit 1; }
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"
          DEST_DIR="${FTP_REMOTE_DIR%/}/Competiciones/ListadoEventos/Workflows/02"

          echo "Destino FTPS: ftp://${FTP_SERVER}${DEST_DIR}"
          sha256sum "$SRC" | awk '{print $1}' > local.sha256

          lftp -u "${FTP_USERNAME}","${FTP_PASSWORD}" "ftp://${FTP_SERVER}" -e "set net:timeout 20; set net:max-retries 3; set net:persist-retry 2; set ftp:passive-mode true; set ftp:ssl-force true; set ftp:ssl-protect-data true; set ssl:verify-certificate no; mkdir -p -f ${DEST_DIR}; cd ${DEST_DIR}; put ${SRC} -o 02info_last.json; put ${SRC} -o 02info_${TS}.json; bye"

          # Verificación
          curl --fail --ssl-reqd --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --output remote.json "ftp://${FTP_SERVER}${DEST_DIR}/02info_last.json"
          sha256sum remote.json | awk '{print $1}' > remote.sha256
          echo "Local : $(cat local.sha256)"
          echo "Remoto: $(cat remote.sha256)"
          diff -q local.sha256 remote.sha256 && echo "OK: hash coincide"
