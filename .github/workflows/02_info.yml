name: 02 - INFO desde 01events

on:
  workflow_run:
    workflows: ["01 - Eventos Prox (JSON base)"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read

jobs:
  produce_02info:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid

    steps:
      - uses: actions/checkout@v4

      - name: Mostrar árbol del repo y rama (debug)
        run: |
          echo "BRANCH: $GITHUB_REF_NAME"
          git ls-files | sed 's/^/ - /' | head -n 200
          echo "----"; ls -la; echo "---- FIN LISTADO ----"

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Instalar dependencias (incluye Selenium)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install "selenium==4.*" "webdriver-manager==4.*" beautifulsoup4 lxml

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Comprobar Chrome y librerías
        run: |
          set -euo pipefail
          which google-chrome
          google-chrome --version || true
          python -c "import sys,selenium,bs4; print('Python:',sys.version); print('Selenium:',selenium.__version__); print('BS4 OK')"

      # Encadenado: baja el artifact exacto del run 01
      - name: Descargar artefacto 01events (modo encadenado)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: a01-01events-json
          path: ./artifacts
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Manual: localizar por API el último artifact activo y bajarlo por ID
      - name: Instalar jq
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Buscar último artifact 'a01-01events-json' (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: find_art
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          repo="${{ github.repository }}"
          best_id=""
          best_ts=""
          for page in 1 2 3 4 5; do
            resp=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                   "https://api.github.com/repos/${repo}/actions/artifacts?per_page=100&page=${page}")
            count=$(echo "$resp" | jq '.artifacts | length')
            [ "$count" -eq 0 ] && break
            while read -r id ts; do
              if [ -z "$best_ts" ] || [ "$(date -d "$ts" +%s)" -gt "$(date -d "$best_ts" +%s)" ]; then
                best_id="$id"; best_ts="$ts"
              fi
            done < <(echo "$resp" | jq -r '.artifacts[] | select(.name=="a01-01events-json" and .expired==false) | "\(.id) \(.updated_at)"')
          done
          if [ -z "$best_id" ]; then
            echo "::error::No se encontró artifact activo llamado a01-01events-json"; exit 1
          fi
          echo "artifact_id=$best_id" >> "$GITHUB_OUTPUT"
          echo "Último artifact id: $best_id @ $best_ts"

      - name: Descargar artifact por ID (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/download-artifact@v4
        with:
          artifact-ids: ${{ steps.find_art.outputs.artifact_id }}
          path: ./artifacts
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ejecutar 02_eventosproxINFO.py
        run: |
          set -euo pipefail
          mkdir -p output
          IN="./artifacts/01events.json"
          test -f "$IN" || { echo "::error::No existe $IN"; ls -la ./artifacts || true; exit 1; }

          SCRIPT_PATH="$(find . -maxdepth 5 -type f -name '02_eventosproxINFO.py' -print -quit)"
          if [ -z "${SCRIPT_PATH:-}" ]; then
            echo "::error::No se encontró 02_eventosproxINFO.py"; exit 1
          fi
          echo "Usando script: $SCRIPT_PATH"
          python "$SCRIPT_PATH" "$IN" "./output/02competiciones_detalladas.json"

          test -f ./output/02competiciones_detalladas.json || { echo "::error::No se generó la salida esperada"; exit 1; }
          ls -lh ./output

      - name: Subir artefacto 02info
        uses: actions/upload-artifact@v4
        with:
          name: a02-02info-json
          path: ./output/02competiciones_detalladas.json
          if-no-files-found: error
          retention-days: 7
