name: 02 - INFO desde 01events

on:
  workflow_run:
    workflows: ["01 - Eventos Prox (JSON base)"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read

concurrency:
  group: info-02
  cancel-in-progress: true

jobs:
  produce_02info:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid
      FLOW_EMAIL: ${{ secrets.FLOW_EMAIL }}
      FLOW_PASS:  ${{ secrets.FLOW_PASS }}
      HEADLESS: "true"
      INCOGNITO: "true"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install "selenium==4.*" "webdriver-manager==4.*" beautifulsoup4 lxml

      - name: Setup Chrome (for Selenium)
        uses: browser-actions/setup-chrome@v1

      # -------- Descarga del artefacto 01 --------
      - name: Download 01events (chained)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: a01-01events-json
          run-id: ${{ github.event.workflow_run.id }}
          path: ./artifacts
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Fallback para lanzamiento manual: busca el último artefacto activo
      - name: Install jq+unzip (manual only)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      - name: Fetch latest a01-01events-json (manual)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          repo="${{ github.repository }}"
          best_id=""; best_ts=""
          page=1
          while :; do
            resp=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                   "https://api.github.com/repos/${repo}/actions/artifacts?per_page=100&page=${page}")
            n=$(echo "$resp" | jq '.artifacts | length')
            [ "$n" -eq 0 ] && break
            while read -r id ts; do
              if [ -z "$best_ts" ] || [ "$(date -d "$ts" +%s)" -gt "$(date -d "$best_ts" +%s)" ]; then
                best_id="$id"; best_ts="$ts"
              fi
            done < <(echo "$resp" | jq -r '.artifacts[] | select(.name=="a01-01events-json" and .expired==false) | "\(.id) \(.updated_at)"')
            page=$((page+1))
          done
          [ -n "$best_id" ] || { echo "::error::No hay artefacto activo llamado a01-01events-json"; exit 1; }
          echo "Descargando artifact id=$best_id (updated_at=$best_ts)"
          mkdir -p artifacts
          curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" -L \
               "https://api.github.com/repos/${repo}/actions/artifacts/${best_id}/zip" \
               -o artifacts.zip
          unzip -o artifacts.zip -d ./artifacts
          ls -la ./artifacts

      # -------- Preparar input + ejecutar --------
      - name: Prepare input
        run: |
          set -euo pipefail
          mkdir -p output
          test -f ./artifacts/01events.json || { echo "::error::Falta ./artifacts/01events.json"; exit 1; }
          cp -f ./artifacts/01events.json ./output/01events.json
          ls -la ./output

      - name: Run 02_eventosproxINFO.py
        run: |
          set -euo pipefail
          SCRIPT_PATH="$(find . -maxdepth 5 -type f -name '02_eventosproxINFO.py' -print -quit)"
          [ -n "$SCRIPT_PATH" ] || { echo "::error::No se encontró 02_eventosproxINFO.py"; exit 1; }
          echo "Usando script: $SCRIPT_PATH"
          python "$SCRIPT_PATH" "./output/01events.json" "./output/02competiciones_detalladas.json"

      - name: Verify output
        run: |
          set -euo pipefail
          ls -lh ./output
          test -f ./output/02competiciones_detalladas.json || { echo "::error::No se generó 02competiciones_detalladas.json"; exit 1; }
          head -n 40 ./output/02competiciones_detalladas.json || true

      # -------- Artefactos --------
      - name: Upload 02info artifact
        uses: actions/upload-artifact@v4
        with:
          name: a02-02info-json
          path: ./output/02competiciones_detalladas.json
          if-no-files-found: error
          retention-days: 7

      - name: Upload debug (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: a02-debug
          path: |
            ./output/**
            ./02_error.png
          if-no-files-found: warn
          retention-days: 7
