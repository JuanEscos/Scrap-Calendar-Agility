name: 02 - INFO desde 01events

on:
  workflow_run:
    workflows: ["01 - Eventos Prox (JSON base)"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read

concurrency:
  group: info-02
  cancel-in-progress: true

jobs:
  produce_02info:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid
      FLOW_USER_EMAIL: ${{ secrets.FLOW_EMAIL }}
      FLOW_USER_PASSWORD: ${{ secrets.FLOW_PASS }}
      HEADLESS: "true"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Instalar dependencias
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install "selenium==4.*" "webdriver-manager==4.*" beautifulsoup4 lxml

      - name: Setup Chrome (para Selenium)
        uses: browser-actions/setup-chrome@v1

      # --- Artefacto del 01 ---
      - name: Descargar 01events (modo encadenado)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: a01-01events-json
          path: ./artifacts01
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Descargar 01events (modo manual: último disponible)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          repo="${{ github.repository }}"
          best=""
          page=1
          while :; do
            resp=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" \
                           -H "Accept: application/vnd.github+json" \
                           "https://api.github.com/repos/${repo}/actions/artifacts?per_page=100&page=${page}")
            n=$(echo "$resp" | jq '.artifacts | length')
            [ "$n" -eq 0 ] && break
            cand=$(echo "$resp" | jq -r '.artifacts[] | select(.name=="a01-01events-json" and .expired==false) | .id' | head -n1)
            if [ -n "$cand" ]; then best="$cand"; break; fi
            page=$((page+1))
          done
          [ -n "$best" ] || { echo "::error::No hay artefacto a01-01events-json"; exit 1; }
          mkdir -p artifacts01
          curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -L \
               "https://api.github.com/repos/${repo}/actions/artifacts/${best}/zip" -o a01.zip
          unzip -o a01.zip -d artifacts01
          ls -la artifacts01

      - name: Preparar entrada/salida para el script
        run: |
          set -euo pipefail
          mkdir -p output
          # El artefacto del 01 debe contener 01events_last.json o 01events.json
          if [ -f ./artifacts01/01events_last.json ]; then
            cp -f ./artifacts01/01events_last.json ./output/01events_last.json
          elif [ -f ./artifacts01/01events.json ]; then
            cp -f ./artifacts01/01events.json ./output/01events_last.json
          else
            echo "::error::No se encontró 01events_last.json ni 01events.json en artifacts01"; exit 1
          fi
          echo "IN:  ./output/01events_last.json"
          echo "OUT: ./output/02competiciones_detalladas.json"

      - name: Ejecutar 02_eventosproxINFO.py (con args IN/OUT)
        run: |
          set -euo pipefail
          python "./02_eventosproxINFO.py" "./output/01events_last.json" "./output/02competiciones_detalladas.json"
          ls -lh ./output
          test -f ./output/02competiciones_detalladas.json

      - name: Subir artefacto 02info
        uses: actions/upload-artifact@v4
        with:
          name: a02-02info-json
          path: ./output/02competiciones_detalladas.json
          if-no-files-found: error
          retention-days: 7

      # ------- Publicación por FTPS -------
      - name: Instalar lftp
        run: sudo apt-get update && sudo apt-get install -y lftp

      - name: Subir por FTPS (fijo + timestamp) y verificar
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}   # p.ej. /www/NewWeb/Privado
        run: |
          set -euo pipefail
          SRC="./output/02competiciones_detalladas.json"
          [ -f "$SRC" ] || { echo "::error::Falta $SRC"; exit 1; }
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"
          DEST_DIR="${FTP_REMOTE_DIR%/}/Competiciones/ListadoEventos/Workflows/02"

          echo "Destino: ftp://${FTP_SERVER}${DEST_DIR}"
          sha256sum "$SRC" | awk '{print $1}' > local.sha256

          # Subida con lftp (TLS explícito / puerto 21)
          lftp -u "${FTP_USERNAME}","${FTP_PASSWORD}" "ftp://${FTP_SERVER}" <<EOF
set net:timeout 20
set net:max-retries 3
set net:persist-retry 2
set ftp:passive-mode true
set ftp:ssl-force true
set ftp:ssl-protect-data true
set ssl:verify-certificate no
mkdir -p -f ${DEST_DIR}
cd ${DEST_DIR}
put -O . ${SRC} -o 02info_last.json
put -O . ${SRC} -o 02info_${TS}.json
bye
EOF

          # Verificar descargando la copia fija
          curl --fail --ssl-reqd --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --output remote.json "ftp://${FTP_SERVER}${DEST_DIR}/02info_last.json"
          sha256sum remote.json | awk '{print $1}' > remote.sha256
          echo "Local : $(cat local.sha256)"
          echo "Remoto: $(cat remote.sha256)"
          diff -q local.sha256 remote.sha256 && echo "OK: hash coincide"
