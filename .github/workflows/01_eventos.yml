name: 01 - Eventos Prox (JSON base)

on:
  schedule:
    - cron: '1 4 * * *'     # 04:01 UTC
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read

concurrency:
  group: eventos-01
  cancel-in-progress: true

jobs:
  produce_01events:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid
      OUT_DIR: ./output
      # Credenciales usadas por tu script 01_eventosprox.py
      FLOW_EMAIL: ${{ secrets.FLOW_EMAIL }}
      FLOW_PASS:  ${{ secrets.FLOW_PASS }}
      HEADLESS: "true"
      INCOGNITO: "true"

    steps:
      - uses: actions/checkout@v4

      - name: Debug repo tree (opcional)
        run: |
          echo "BRANCH: $GITHUB_REF_NAME"
          git ls-files | head -n 200 || true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install Python deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install beautifulsoup4 selenium webdriver-manager lxml
          fi

      - name: Setup Chrome (para Selenium)
        uses: browser-actions/setup-chrome@v1

      - name: Run 01_eventosprox.py
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR"
          SCRIPT_PATH="$(find . -maxdepth 3 -type f -name '01_eventosprox.py' -print -quit)"
          if [ -z "${SCRIPT_PATH:-}" ]; then
            echo "::error::No se encontró 01_eventosprox.py en el repo"; exit 1
          fi
          echo "Usando script: $SCRIPT_PATH"
          python "$SCRIPT_PATH"

          # El script puede generar output/events.json; normalizamos a 01events.json
          if [ -f "$OUT_DIR/events.json" ]; then
            mv -f "$OUT_DIR/events.json" "$OUT_DIR/01events.json"
          fi
          test -f "$OUT_DIR/01events.json" || { echo "::error::No se generó $OUT_DIR/01events.json"; exit 1; }

      - name: Show output
        run: |
          ls -lh "$OUT_DIR"
          jq 'length' "$OUT_DIR/01events.json" || true

      - name: Upload artifact (a01-01events-json)
        uses: actions/upload-artifact@v4
        with:
          name: a01-01events-json
          path: ./output/01events.json
          if-no-files-found: error
          retention-days: 7

      - name: Install lftp
        run: sudo apt-get update && sudo apt-get install -y lftp

      - name: (FTPS) Upload 01events (timestamp + last) with lftp
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          FILE="./output/01events.json"
          [ -f "$FILE" ] || { echo "::error::No existe $FILE"; exit 1; }
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"
          REMOTE_BASE="${FTP_REMOTE_DIR}/Competiciones/ListadoEventos/Workflows/01"

          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" <<EOF
          set cmd:fail-exit true
          set net:max-retries 2
          set net:timeout 40
          set ftp:ssl-force true
          set ftp:ssl-protect-data true
          set ftp:passive-mode true
          set ftp:use-feat true
          mkdir -p "${REMOTE_BASE}"
          cd "${REMOTE_BASE}"
          put -O . "${FILE}" -o "01events_${TS}.json"
          put -O . "${FILE}" -o "01events_last.json"
          bye
          EOF

      - name: (FTPS) Verify remote hash with lftp
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          REMOTE_BASE="${FTP_REMOTE_DIR}/Competiciones/ListadoEventos/Workflows/01"
          mkdir -p ./verify
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" <<EOF
          set cmd:fail-exit true
          set net:max-retries 1
          set net:timeout 40
          set ftp:ssl-force true
          set ftp:ssl-protect-data true
          set ftp:passive-mode true
          cd "${REMOTE_BASE}"
          get -O ./verify "01events_last.json"
          bye
          EOF
          sha256sum ./verify/01events_last.json | awk '{print $1}' > remote.sha256
          sha256sum ./output/01events.json     | awk '{print $1}' > local.sha256
          echo "Hash local : $(cat local.sha256)"
          echo "Hash remoto: $(cat remote.sha256)"
          diff -q local.sha256 remote.sha256 && echo "OK: hash coincide"
