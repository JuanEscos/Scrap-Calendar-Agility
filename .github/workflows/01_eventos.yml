name: 01 - Eventos Prox (JSON base)

on:
  schedule:
    - cron: '1 4 * * *'   # 04:01 UTC
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read

concurrency:
  group: participantes-01
  cancel-in-progress: true

jobs:
  produce_01events:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid
      # --- Credenciales para 01_eventosprox.py ---
      FLOW_EMAIL: ${{ secrets.FLOW_EMAIL }}
      FLOW_PASS:  ${{ secrets.FLOW_PASS }}
      HEADLESS: "true"
      INCOGNITO: "true"
    steps:
      - uses: actions/checkout@v4

      - name: Mostrar árbol del repo (debug)
        run: |
          echo "BRANCH: $GITHUB_REF_NAME"
          git ls-files | sed 's/^/ - /' | head -n 200
          echo "----"
          ls -la
          echo "---- FIN LISTADO ----"

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Por si no estuvieran en requirements.txt:
          pip install beautifulsoup4 lxml selenium webdriver-manager python-dotenv

      - name: Instalar Google Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Comprobar Chrome y librerías
        run: |
          which google-chrome || true
          google-chrome --version || true
          python - <<'PY'
          import sys, selenium, bs4
          print("Python:", sys.version)
          print("Selenium:", selenium.__version__)
          print("BS4 OK")
          PY

      - name: Ejecutar 01_eventosprox.py
        id: run01
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p output
          # Localizar el script (en raíz o subcarpetas)
          SCRIPT_PATH="$(git ls-files | grep -E '(^|/)(01_eventosprox\.py)$' | head -n1 || true)"
          if [ -z "${SCRIPT_PATH:-}" ]; then
            echo "::error::No se encontró 01_eventosprox.py en el repo"; exit 1
          fi
          echo "Usando script: $SCRIPT_PATH"
          python "$SCRIPT_PATH"

          # Aceptar ./output/events.json o ./output/01events.json
          if [ -f ./output/events.json ]; then
            cp -f ./output/events.json ./output/01events.json
          elif [ -f ./output/01events.json ]; then
            :
          else
            echo "::error::No se generó ./output/events.json ni ./output/01events.json"; exit 1
          fi

      - name: Verificar salida
        run: |
          ls -lh ./output
          test -f ./output/01events.json
          # (Opcional) contar elementos si es JSON array
          python - <<'PY'
          import json, sys
          with open("./output/01events.json","r",encoding="utf-8") as f:
              data=json.load(f)
          if isinstance(data,list):
              print("Eventos totales:", len(data))
          else:
              print("JSON raíz no es lista (OK si tu script lo define así).")
          PY

      - name: Subir artefacto 01events (para el 02)
        uses: actions/upload-artifact@v4
        with:
          name: a01-01events-json
          path: ./output/01events.json
          if-no-files-found: error
          retention-days: 7

      # ---------- FTPS: subir a /Competiciones/ListadoEventos/Workflows/01 ----------
      - name: Instalar lftp
        run: |
          sudo apt-get update
          sudo apt-get install -y lftp

      - name: (FTPS) Diagnóstico de ruta remota
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}   # p.ej. /www/NewWeb/Privado
        shell: bash
        run: |
          set -euo pipefail
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" <<EOF
          set cmd:fail-exit true
          set net:max-retries 1
          set net:timeout 30
          set ftp:ssl-force true
          set ftp:ssl-protect-data true
          set ftp:passive-mode true
          set ssl:verify-certificate no
          echo "PWD inicial:"; pwd
          echo "Contenido inicial:"; cls -l
          cd "${FTP_REMOTE_DIR}" || cd "/${FTP_REMOTE_DIR}" || echo "WARN: no puedo cd a FTP_REMOTE_DIR; sigo en PWD"
          echo "PWD tras cd FTP_REMOTE_DIR:"; pwd
          echo "Contenido:"; cls -l
          bye
          EOF

      - name: (FTPS) Subir 01events (destino preferente + fallback)
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          FILE="./output/01events.json"
          [ -f "$FILE" ] || { echo "::error::Falta $FILE"; exit 1; }
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"

          # Intento principal: subir a .../Competiciones/ListadoEventos/Workflows/01
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" <<EOF || echo "WARN: subida principal falló; probaré fallback"
          set cmd:fail-exit true
          set net:max-retries 2
          set net:timeout 40
          set ftp:ssl-force true
          set ftp:ssl-protect-data true
          set ftp:passive-mode true
          set ssl:verify-certificate no

          cd "${FTP_REMOTE_DIR}" || cd "/${FTP_REMOTE_DIR}"

          mkdir -f "Competiciones" || true
          cd "Competiciones" || exit 2

          mkdir -f "ListadoEventos" || true
          cd "ListadoEventos" || exit 2

          mkdir -f "Workflows" || true
          cd "Workflows" || exit 2

          mkdir -f "01" || true
          cd "01" || exit 2

          echo "Destino final:"; pwd; cls -l
          put -O . "${FILE}" -o "01events_last.json"
          put -O . "${FILE}" -o "01events_${TS}.json"
          bye
          EOF

          # Comprobar si quedó en la carpeta objetivo
          if lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e "set ftp:ssl-force true; set ftp:ssl-protect-data true; set ftp:passive-mode true; set ssl:verify-certificate no; cd \"${FTP_REMOTE_DIR}\" || cd \"/${FTP_REMOTE_DIR}\"; cd Competiciones/ListadoEventos/Workflows/01 || exit 3; cls -1; bye" >/dev/null 2>&1; then
            echo "Subida principal OK en Competiciones/ListadoEventos/Workflows/01"
          else
            echo "Haciendo fallback: subir en carpeta base ${FTP_REMOTE_DIR}"
            lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" <<EOF
            set cmd:fail-exit true
            set net:max-retries 2
            set net:timeout 40
            set ftp:ssl-force true
            set ftp:ssl-protect-data true
            set ftp:passive-mode true
            set ssl:verify-certificate no
            cd "${FTP_REMOTE_DIR}" || cd "/${FTP_REMOTE_DIR}"
            put -O . "${FILE}" -o "01events_last.json"
            put -O . "${FILE}" -o "01events_${TS}.json"
            bye
            EOF
            echo "Fallback: archivos subidos en ${FTP_REMOTE_DIR}"
          fi
