name: Eventos01 RSCE diario

on:
  schedule:
    - cron: '5 4 * * *'   # 04:05 UTC
  workflow_dispatch: {}

jobs:
  run_and_upload:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Instalar dependencias (si existe requirements.txt)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Ejecutar script que genera el JSON
        run: |
          set -euo pipefail
          python "./01_eventsProx.py"   # <-- ajusta el nombre si tu script es distinto

      - name: Localizar JSON y calcular hash
        id: out
        run: |
          set -euo pipefail
          FILE_PATH="$(find . -type f -name 'events.json' -print -quit)"
          if [ -z "$FILE_PATH" ]; then
            echo "::error::No se encontrÃ³ events.json"; exit 1
          fi
          echo "file_path=$FILE_PATH" >> "$GITHUB_OUTPUT"
          sha256sum "$FILE_PATH" | awk '{print $1}' > local.sha256
          echo "local_hash=$(cut -d' ' -f1 local.sha256)" >> "$GITHUB_OUTPUT"

      - name: Listar carpeta remota (antes de subir)
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}   # ej: /www/NewWeb/Privado
        run: |
          set -euo pipefail
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoEventos"
          echo "Listando: ${BASE}/"
          curl --fail --ssl-reqd --user "${FTP_USERNAME}:${FTP_PASSWORD}" "${BASE}/" -l || true

      - name: Subir JSON por FTPS (TLS explicito en 21)
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          FILE="${{ steps.out.outputs.file_path }}"
          if [ ! -f "$FILE" ]; then
            echo "::error::El fichero local no existe: $FILE"; exit 1
          fi
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoEventos"
          echo "Subiendo: $FILE -> ${BASE}/events.json"
          curl --fail --ssl-reqd --ftp-create-dirs --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --upload-file "$FILE" \
               "${BASE}/events.json"

      - name: Verificar remoto (descargar y comparar hash)
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoEventos"
          echo "Descargando: ${BASE}/events.json"
          curl --fail --ssl-reqd --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --output remote.json "${BASE}/events.json"

          sha256sum remote.json | awk '{print $1}' > remote.sha256
          echo "Hash local : ${{ steps.out.outputs.local_hash }}"
          echo "Hash remoto: $(cut -d' ' -f1 remote.sha256)"
          diff -q local.sha256 remote.sha256
          echo "OK: hash coincide"
