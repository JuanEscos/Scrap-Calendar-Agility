name: 03 - Participantes (scrape + process)

on:
  workflow_run:
    workflows: ["02 - INFO desde 01events"]
    types: [completed]
  workflow_dispatch: {}
  schedule:
    - cron: '3 4 * * *'

permissions:
  contents: read
  actions: read

concurrency:
  group: participantes-03
  cancel-in-progress: true

jobs:
  run_and_upload:
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      TZ: Europe/Madrid
      OUT_DIR: ./output
      FLOW_EMAIL: ${{ secrets.FLOW_EMAIL }}
      FLOW_PASS:  ${{ secrets.FLOW_PASS }}
      HEADLESS: "true"
      INCOGNITO: "true"
      FILE_PREFIX: "03"          # el script genera 03events_*.csv, 03participantes_*.csv
      LIMIT_EVENTS: "15"         # evita runs larguísimos
      LIMIT_PARTICIPANTS: "60"   # idem

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Instalar dependencias
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install selenium webdriver-manager beautifulsoup4 python-dotenv pandas python-dateutil numpy
          fi

      - name: Instalar Google Chrome (Selenium)
        uses: browser-actions/setup-chrome@v1

      - name: Ejecutar 03 (all: scrape + process) con timeout duro
        id: run03
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR"
          # Timeout duro para evitar bucles: 75 minutos (ajusta si te hace falta)
          if ! timeout 75m python "./03_eventosproxParticipantes.py" all; then
            echo "::error::03_eventosproxParticipantes.py superó el tiempo"
            pkill -9 -f chrome || true
            pkill -9 -f chromedriver || true
            exit 1
          fi

      - name: Mostrar outputs
        run: |
          set -euo pipefail
          echo "Contenido de $OUT_DIR:"
          ls -la "$OUT_DIR" || true
          echo "Coincidencias previstas:"
          ls -1 ./output/*events_*.csv            2>/dev/null || true
          ls -1 ./output/*participantes_*.csv     2>/dev/null || true
          ls -1 ./output/participantes*.json      2>/dev/null || true
          ls -1 ./output/*progress_*.json         2>/dev/null || true
          ls -1 ./output/participantes_procesado_*.csv 2>/dev/null || true

      # Garantiza que hay algo que subir (si no, falla claramente aquí)
      - name: Assert outputs exist
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=( ./output/*events_*.csv ./output/*participantes_*.csv ./output/participantes*.json ./output/participantes_procesado_*.csv )
          echo "Ficheros a subir: ${files[*]:-<ninguno>}"
          if [ ${#files[@]} -eq 0 ]; then
            echo "::error::No hay ficheros de salida para subir (revisa nombres, FILE_PREFIX y OUT_DIR)"; exit 1
          fi

      - name: Subir artefactos (JSON+CSV)
        uses: actions/upload-artifact@v4
        with:
          name: a03-participants-processed
          path: |
            ./output/*events_*.csv
            ./output/*participantes_*.csv
            ./output/participantes.json
            ./output/participantes_*.json
            ./output/participantes_procesado_*.csv
            ./output/*progress_*.json
          if-no-files-found: error
          retention-days: 7

      # (Opcional) Diagnóstico en FTP: instalar lftp y listar carpeta remota
      - name: Instalar lftp (para debug opcional)
        run: sudo apt-get update && sudo apt-get install -y lftp

      - name: (DEBUG opcional) Listar carpeta remota donde suele caer 03
        if: always()
        continue-on-error: true
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          echo "Buscando artefactos del 03 bajo ${FTP_REMOTE_DIR} (solo diagnóstico)"
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e " \
            set cmd:fail-exit false; \
            set net:timeout 15; \
            set net:max-retries 1; \
            set ftp:ssl-force true; \
            set ftp:ssl-protect-data true; \
            set ftp:passive-mode true; \
            set ftp:prefer-epsv false; \
            set ssl:verify-certificate no; \
            cd '${FTP_REMOTE_DIR}' || cd '/${FTP_REMOTE_DIR}'; \
            cls -1 -R | head -n 200 || true; \
            bye"
