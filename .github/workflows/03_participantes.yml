name: 03 - Participantes (scrape + process)

on:
  workflow_run:
    workflows: ["02 - INFO desde 01events"]
    types: [completed]
  workflow_dispatch: {}
  schedule:
    - cron: '3 4 * * *'

permissions:
  contents: read
  actions: read

concurrency:
  group: participantes-03
  cancel-in-progress: true

jobs:
  run_and_upload:
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      TZ: Europe/Madrid
      OUT_DIR: ./output
      FLOW_EMAIL: ${{ secrets.FLOW_EMAIL }}
      FLOW_PASS:  ${{ secrets.FLOW_PASS }}
      HEADLESS: "true"
      INCOGNITO: "true"
      FILE_PREFIX: "03"
      LIMIT_EVENTS: "15"
      LIMIT_PARTICIPANTS: "60"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: "Instalar dependencias"
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install selenium webdriver-manager beautifulsoup4 python-dotenv pandas python-dateutil numpy
          fi

      - name: "Instalar Google Chrome (Selenium)"
        uses: browser-actions/setup-chrome@v1

      - name: "Ejecutar 03 (all: scrape + process) con timeout duro"
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR"
          set -o pipefail
          if ! timeout 75m python "./03_eventosproxParticipantes.py" all 2>&1 | tee "$OUT_DIR/03_run.log"; then
            echo "::error::03_eventosproxParticipantes.py superó el tiempo"
            pkill -9 -f chrome || true
            pkill -9 -f chromedriver || true
            exit 1
          fi

      - name: "Diagnóstico: listar OUT_DIR (recursivo)"
        shell: bash
        run: |
          set -euo pipefail
          echo "PWD=$(pwd)"
          echo "Contenido nivel 1 de $OUT_DIR"
          ls -la "$OUT_DIR" || true
          echo
          echo "Fechas/tamaños de ficheros en $OUT_DIR:"
          find "$OUT_DIR" -maxdepth 1 -type f -printf "%TY-%Tm-%Td %TT %9s %p\n" | sort || true

      - name: "Salvaguarda: crear artefactos vacíos si faltan"
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=( "$OUT_DIR"/*events_*.csv "$OUT_DIR"/*participantes_*.csv "$OUT_DIR"/participantes*.json "$OUT_DIR"/participantes_procesado_*.csv )
          if [ ${#files[@]} -eq 0 ]; then
            echo "::warning::No se generaron salidas esperadas; creando placeholders para diagnóstico."
            python - <<'PY'
import csv, json, os, datetime
out='./output'
os.makedirs(out, exist_ok=True)
date=datetime.datetime.now().strftime('%Y-%m-%d')
# events header
EVENT_HEADER=["uuid","event_url","title","organizer","location","dates","header_1","header_2","header_3","header_4","header_5","header_6","judges"]
with open(f'{out}/03events_{date}.csv','w',newline='',encoding='utf-8-sig') as f:
    csv.DictWriter(f, fieldnames=EVENT_HEADER).writeheader()
# participants header
PART_BASE=["participants_url","BinomID","Dorsal","Guía","Perro","Raza","Edad","Género","Altura (cm)","Nombre de Pedigree","País","Licencia","Club","Federación","Equipo","event_uuid","event_title"]
slots=[]
for i in range(1,7): slots+= [f"Día {i}",f"Fecha {i}",f"Mangas {i}"]
PART_HEADER=PART_BASE+slots
with open(f'{out}/03participantes_{date}.csv','w',newline='',encoding='utf-8-sig') as f:
    csv.DictWriter(f, fieldnames=PART_HEADER).writeheader()
open(f'{out}/participantes_procesado_{date}.csv','w',encoding='utf-8').write(','.join(["event_url","PruebaNom","Organiza","Lugar","Fechas","BinomID","Dorsal","Guia","Perro","Raza","Edad","SexoPerro","AlturaPerro","Licencia","Club","Federacion","Grado","Cat","CatExtra"])+"\n")
json.dump([], open(f'{out}/participantes.json','w',encoding='utf-8'), ensure_ascii=False)
PY
          fi

      - name: "Mostrar outputs (tras salvaguarda)"
        shell: bash
        run: |
          set -euo pipefail
          echo "Contenido de $OUT_DIR:"
          ls -la "$OUT_DIR" || true
          echo "Coincidencias previstas:"
          ls -1 ./output/*events_*.csv                  2>/dev/null || true
          ls -1 ./output/*participantes_*.csv           2>/dev/null || true
          ls -1 ./output/participantes*.json            2>/dev/null || true
          ls -1 ./output/*progress_*.json               2>/dev/null || true
          ls -1 ./output/participantes_procesado_*.csv  2>/dev/null || true

      - name: "Subir artefactos (JSON+CSV+log)"
        uses: actions/upload-artifact@v4
        with:
          name: a03-participants-processed
          path: |
            ./output/*events_*.csv
            ./output/*participantes_*.csv
            ./output/participantes.json
            ./output/participantes_*.json
            ./output/participantes_procesado_*.csv
            ./output/*progress_*.json
            ./output/03_run.log
          if-no-files-found: error
          retention-days: 7

      - name: "Instalar lftp (debug opcional)"
        continue-on-error: true
        run: sudo apt-get update && sudo apt-get install -y lftp

      - name: "(DEBUG) Listar carpeta remota"
        if: always()
        continue-on-error: true
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Listado bajo ${FTP_REMOTE_DIR} (solo diagnóstico):"
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e " \
            set cmd:fail-exit false; \
            set net:timeout 15; \
            set net:max-retries 1; \
            set ftp:ssl-force true; \
            set ftp:ssl-protect-data true; \
            set ftp:passive-mode true; \
            set ftp:prefer-epsv false; \
            set ssl:verify-certificate no; \
            cd '${FTP_REMOTE_DIR}' || cd '/${FTP_REMOTE_DIR}'; \
            cls -l -R | head -n 200 || true; \
            bye"
