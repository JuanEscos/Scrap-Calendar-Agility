name: 03 - Participantes (scrape + process)

on:
  workflow_run:
    workflows: ["02 - INFO desde 01events"]
    types: [completed]
  workflow_dispatch: {}
  schedule:
    - cron: '3 4 * * *'   # opcional

permissions:
  contents: read
  actions: read

concurrency:
  group: participantes-03
  cancel-in-progress: true

jobs:
  run_and_upload:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      TZ: Europe/Madrid
      OUT_DIR: ./output
      FLOW_EMAIL: ${{ secrets.FLOW_EMAIL }}
      FLOW_PASS:  ${{ secrets.FLOW_PASS }}
      HEADLESS: "true"
      INCOGNITO: "true"
      FILE_PREFIX: "03"
      # Ajusta estos límites a tu gusto
      LIMIT_EVENTS: "15"
      LIMIT_PARTICIPANTS: "60"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Instalar dependencias
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install selenium webdriver-manager beautifulsoup4 python-dotenv pandas python-dateutil numpy
          fi

      - name: Instalar Google Chrome (Selenium)
        uses: browser-actions/setup-chrome@v1

      - name: Ejecutar 03 (all: scrape + process) con timeout duro
        id: run03
        shell: bash
        timeout-minutes: 70
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR"

          # Parche rápido por si quedó el '&&' en Python
          sed -i 's/RESUME &&/RESUME and/' ./03_eventosproxParticipantes.py || true

          # Ejecuta con timeout de seguridad (por si Selenium se queda colgado)
          if ! timeout 65m python "./03_eventosproxParticipantes.py" all; then
            echo "::error::03_eventosproxParticipantes.py superó el tiempo"
            pkill -9 -f chrome || true
            pkill -9 -f chromedriver || true
            exit 1
          fi

      - name: Listado de outputs
        shell: bash
        run: |
          set -euo pipefail
          echo "Contenido de $OUT_DIR:"
          ls -la "$OUT_DIR" || true
          echo "Coincidencias previstas:"
          ls -1 ./output/*events_*.csv 2>/dev/null || true
          ls -1 ./output/03participantes_*.csv 2>/dev/null || true
          ls -1 ./output/participantes_procesado_*.csv 2>/dev/null || true
          ls -1 ./output/participantes.json 2>/dev/null || true
          ls -1 ./output/participantes_*.json 2>/dev/null || true
          ls -1 ./output/*progress_*.json 2>/dev/null || true

      - name: Assert outputs exist
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=( ./output/*events_*.csv ./output/03participantes_*.csv ./output/participantes_procesado_*.csv ./output/participantes.json ./output/participantes_*.json )
          echo "Ficheros a subir: ${files[*]:-<ninguno>}"
          if [ ${#files[@]} -eq 0 ]; then
            echo "::error::No hay ficheros de salida para subir (revisa nombres y OUT_DIR)"; exit 1
          fi

      - name: Upload artifact (para el 04)
        uses: actions/upload-artifact@v4
        with:
          name: a03-participants-processed
          path: |
            ./output/*events_*.csv
            ./output/03participantes_*.csv
            ./output/participantes_procesado_*.csv
            ./output/participantes.json
            ./output/participantes_*.json
            ./output/*progress_*.json
          if-no-files-found: error
          retention-days: 5

      # ========= FTPS (como en el 01) =========
      - name: Instalar lftp
        run: |
          sudo apt-get update
          sudo apt-get install -y lftp

      - name: (FTPS) Subir ficheros + verificar uno
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        shell: bash
        run: |
          set -euo pipefail

          DEST_DIR="$(printf "%s/Competiciones/ListadoEventos/Workflows/03" "${FTP_REMOTE_DIR%/}")"
          echo "DEST_DIR calculado: $DEST_DIR"

          # Localiza el más reciente de cada tipo
          CSV_EVENTS="$(ls -1t ./output/*events_*.csv 2>/dev/null | head -n1 || true)"
          CSV_PARTS="$(ls -1t ./output/03participantes_*.csv 2>/dev/null | head -n1 || true)"
          CSV_PROC="$(ls -1t ./output/participantes_procesado_*.csv 2>/dev/null | head -n1 || true)"
          JSON_LAST="./output/participantes.json"
          JSON_DATED="$(ls -1t ./output/participantes_*.json 2>/dev/null | head -n1 || true)"
          PROGRESS="$(ls -1t ./output/*progress_*.json 2>/dev/null | head -n1 || true)"

          # Al menos el JSON final debe existir
          test -f "$JSON_LAST" || { echo "::error::Falta $JSON_LAST"; exit 1; }
          sha256sum "$JSON_LAST" | awk '{print $1}' > local.sha256

          # Subidas (fijos + originales)
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e " \
            set cmd:fail-exit true; \
            set net:timeout 25; \
            set net:max-retries 1; \
            set net:persist-retries 0; \
            set ftp:ssl-force true; \
            set ftp:ssl-protect-data true; \
            set ftp:passive-mode true; \
            set ftp:prefer-epsv false; \
            set ssl:verify-certificate no; \
            cd '${FTP_REMOTE_DIR}' || cd '/${FTP_REMOTE_DIR}'; \
            mkdir -f Competiciones; cd Competiciones; \
            mkdir -f ListadoEventos; cd ListadoEventos; \
            mkdir -f Workflows; cd Workflows; \
            mkdir -f 03; cd 03; \
            $( [ -n "${CSV_EVENTS}" ]  && echo "put -O . '${CSV_EVENTS}' -o '03events_last.csv'; put -O . '${CSV_EVENTS}' -o '$(basename "${CSV_EVENTS}")';" ); \
            $( [ -n "${CSV_PARTS}" ]   && echo "put -O . '${CSV_PARTS}'  -o '03participantes_last.csv'; put -O . '${CSV_PARTS}'  -o '$(basename "${CSV_PARTS}")';" ); \
            $( [ -n "${CSV_PROC}" ]    && echo "put -O . '${CSV_PROC}'   -o 'participantes_procesado_last.csv'; put -O . '${CSV_PROC}'   -o '$(basename "${CSV_PROC}")';" ); \
            put -O . '${JSON_LAST}' -o 'participantes_last.json'; \
            $( [ -n "${JSON_DATED}" ]  && echo "put -O . '${JSON_DATED}' -o '$(basename "${JSON_DATED}")';" ); \
            $( [ -n "${PROGRESS}" ]    && echo "put -O . '${PROGRESS}'   -o '$(basename "${PROGRESS}")';" ); \
            echo 'Contenido en destino:'; pwd; cls -l; \
            bye"

          # Verifica hash de participantes_last.json
          rm -rf dl && mkdir -p dl
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e " \
            set cmd:fail-exit true; \
            set net:timeout 25; \
            set net:max-retries 1; \
            set net:persist-retries 0; \
            set ftp:ssl-force true; \
            set ftp:ssl-protect-data true; \
            set ftp:passive-mode true; \
            set ftp:prefer-epsv false; \
            set ssl:verify-certificate no; \
            cd '${DEST_DIR}' || cd '/${DEST_DIR}'; \
            get -O '${PWD}/dl' 'participantes_last.json'; \
            bye"
          test -f dl/participantes_last.json || { echo "::error::No se descargó dl/participantes_last.json"; ls -la dl; exit 1; }
          sha256sum dl/participantes_last.json | awk '{print $1}' > remote.sha256
          echo "Local : $(cat local.sha256)"
          echo "Remoto: $(cat remote.sha256)"
          diff -q local.sha256 remote.sha256

      - name: (FTPS) Debug recursive list (always)
        if: always()
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Buscando artefactos del 03 bajo ${FTP_REMOTE_DIR}"
          lftp -u "${FTP_USERNAME},${FTP_PASSWORD}" "${FTP_SERVER}" -e " \
            set cmd:fail-exit false; \
            set net:timeout 15; \
            set net:max-retries 1; \
            set ftp:ssl-force true; \
            set ftp:ssl-protect-data true; \
            set ftp:passive-mode true; \
            set ftp:prefer-epsv false; \
            set ssl:verify-certificate no; \
            cd '${FTP_REMOTE_DIR}' || cd '/${FTP_REMOTE_DIR}'; \
            cls -1 -R | grep -Ei '(^|/)(03(events|participantes).*|participantes(_procesado)?_.*|participantes_last\.json)$' || true; \
            bye"
