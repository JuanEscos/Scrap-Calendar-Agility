name: 01 - Eventos Prox (JSON base)

on:
  schedule:
    - cron: '1 4 * * *'   # 04:01 UTC
  workflow_dispatch: {}

concurrency:
  group: eventos-01
  cancel-in-progress: true

jobs:
  produce_01events:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid

    steps:
      - uses: actions/checkout@v4

      - name: Mostrar árbol del repo y rama
        run: |
          echo "BRANCH: $GITHUB_REF_NAME"
          git ls-files | sed 's/^/ - /' | head -n 200 || true
          echo "----"
          ls -la
          echo "---- FIN LISTADO ----"

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install beautifulsoup4 selenium webdriver-manager

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Ejecutar 01_eventosprox.py
        run: |
          set -euo pipefail
          mkdir -p output
          SCRIPT_PATH="$(find . -maxdepth 3 -type f -name '01_eventosprox.py' -print -quit)"
          if [ -z "${SCRIPT_PATH:-}" ]; then
            echo "::error::No se encontró 01_eventosprox.py en el repo"; exit 1
          fi
          echo "Usando script: $SCRIPT_PATH"
          python "$SCRIPT_PATH"
          test -f ./output/events.json || { echo "::error::No se generó ./output/events.json"; exit 1; }
          mv -f ./output/events.json ./output/01events.json

      - name: Verificar salida
        run: |
          ls -lh ./output
          (command -v jq >/dev/null 2>&1 && jq 'length' ./output/01events.json) || true

      - name: Subir artefacto 01events
        uses: actions/upload-artifact@v4
        with:
          name: a01-01events-json
          path: ./output/01events.json
          if-no-files-found: error
          retention-days: 7

      - name: (FTPS) Subir outputs 01 para debug
        if: always()
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/ListadoEventos/Workflows/01"
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"
          shopt -s nullglob
          for f in output/*; do
            [ -f "$f" ] || continue
            bn="$(basename "$f")"
            curl --fail --ssl-reqd --ftp-create-dirs --disable-epsv --ftp-skip-pasv-ip \
                 --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
                 --upload-file "$f" "${BASE}/${bn}"
            curl --fail --ssl-reqd --disable-epsv --ftp-skip-pasv-ip \
                 --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
                 --upload-file "$f" "${BASE}/${TS}_${bn}"
          done
