name: 4 - UniÃ³n + FTPS

on:
  workflow_run:
    workflows: ["3 - Participantes (scrape + process)"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: read

jobs:
  union_and_upload:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Madrid
      OUT_DIR: "./output"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download a03-participants-processed
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: a03-participants-processed
          path: ./artifacts
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: (Manual) Fetch latest a03-participants-processed
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y jq unzip
          repo="${{ github.repository }}"
          best=""
          for page in 1 2 3 4 5; do
            resp=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                   "https://api.github.com/repos/${repo}/actions/artifacts?per_page=100&page=${page}")
            ids=$(echo "$resp" | jq -r '.artifacts[] | select(.name=="a03-participants-processed" and .expired==false) | .id')
            [ -z "$ids" ] || best=$(echo "$resp" | jq -r '.artifacts[] | select(.name=="a03-participants-processed" and .expired==false) | .id' | head -n1)
            [ -n "$best" ] && break
          done
          [ -n "$best" ] || { echo "::error::No active artifact a03-participants-processed"; exit 1; }
          mkdir -p artifacts
          curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" -L \
            "https://api.github.com/repos/${repo}/actions/artifacts/${best}/zip" -o a03.zip
          unzip -o a03.zip -d ./artifacts
          ls -la ./artifacts

      - name: Prepare OUT_DIR
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR"
          # mueve los outputs del 03 al OUT_DIR para que el 04 los encuentre
          shopt -s nullglob
          for f in ./artifacts/*; do
            cp -f "$f" "$OUT_DIR"/
          done
          ls -la "$OUT_DIR"

      - name: Run 04_eventosproxUnion.py
        run: |
          set -euo pipefail
          SCRIPT_PATH="$(find . -maxdepth 4 -type f -name '04_eventosproxUnion.py' -print -quit)"
          [ -n "$SCRIPT_PATH" ] || { echo "::error::No se encuentra 04_eventosproxUnion.py"; exit 1; }
          python "$SCRIPT_PATH" "$OUT_DIR" "$OUT_DIR/participantes_completos_final.json"
          test -f "$OUT_DIR/participantes_completos_final.json"

      - name: (FTPS) Subir JSON final
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          FILE="$OUT_DIR/participantes_completos_final.json"
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoParticipantes"
          TS="$(date -u +'%Y%m%dT%H%M%SZ')"
          curl --fail --ssl-reqd --ftp-create-dirs --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --upload-file "$FILE" \
               "${BASE}/participants_completos_final.json"
          curl --fail --ssl-reqd --ftp-create-dirs --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --upload-file "$FILE" \
               "${BASE}/participants_completos_final_${TS}.json"

      - name: (FTPS) Verificar remoto por hash
        env:
          FTP_SERVER:     ${{ secrets.FTP_SERVER }}
          FTP_USERNAME:   ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD:   ${{ secrets.FTP_PASSWORD }}
          FTP_REMOTE_DIR: ${{ secrets.FTP_REMOTE_DIR }}
        run: |
          set -euo pipefail
          FILE="$OUT_DIR/participantes_completos_final.json"
          BASE="ftp://${FTP_SERVER}${FTP_REMOTE_DIR}/Competiciones/ListadoParticipantes"
          curl --fail --ssl-reqd --disable-epsv --ftp-skip-pasv-ip \
               --user "${FTP_USERNAME}:${FTP_PASSWORD}" \
               --output remote.json "${BASE}/participants_completos_final.json"
          sha256sum "$FILE" | awk '{print $1}' > local.sha256
          sha256sum remote.json | awk '{print $1}' > remote.sha256
          echo "Local : $(cat local.sha256)"
          echo "Remoto: $(cat remote.sha256)"
          diff -q local.sha256 remote.sha256 && echo "OK: hash coincide"
